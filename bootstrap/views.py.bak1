from django.shortcuts import render_to_response  
from django.template import RequestContext  
from django.http import HttpResponseRedirect,HttpResponse 
from django.core.urlresolvers import reverse  

from .models import Document  
from .model.t_Ticket import T_ticket
from .forms.addFile import DocumentForm  
from .forms.addName import NameForm
from .forms.regUser import RegUser
from .models import User

  
def list(request):  
    # Handle file upload  
    if request.method == 'POST':  
        form = DocumentForm(request.POST, request.FILES)  
        if form.is_valid():  
            newdoc = Document(docfile = request.FILES['docfile'])  
            newdoc.save()  
  
            # Redirect to the document list after POST  
            return HttpResponseRedirect(reverse('bootstrap:list'))  
    else:  
        form = DocumentForm() # A empty, unbound form  
  
    # Load documents for the list page  
    documents = Document.objects.all()  
  
    # Render list page with the documents and the form  
    return render_to_response(  
        'bootstrap/list.html',  
        {'documents': documents, 'form': form},  
        context_instance=RequestContext(request)  
    )  

def regist(req):
    if req.method =='POST':
        uf = RegUser(req.POST)
        if uf.is_valid():
            username = uf.cleaned_data['username']
            password = uf.cleaned_data['password']
            User.objects.create(username=username,password=password)
            f = open('/data/dennie/pythontest/lib/python3.5/site-packages/django/bin/mysite/media/documents/2016/03/a.txt',encoding="utf-8")
            TickList = []
            for line in f:
                ticket_id, channel = line.split(',')
                ticket = T_ticket(ticket_id=ticket_id, channel=channel)

                TickList.append(ticket)
            f.close()

            T_ticket.objects.bulk_create(TickList)
            #T_ticket.objects.create(ticket_id=554536,user_uin=123456789)
            return HttpResponse('regist success')
    else:
        uf = RegUser()
    return render_to_response(
        'bootstrap/register.html',
        {'uf': uf},
        context_instance=RequestContext(req),
     )


def login(req):
    if req.method == 'POST':
        uf = RegUser(req.POST)
        if uf.is_valid():
            username = uf.cleaned_data['username']
            password = uf.cleaned_data['password']
            user=User.objects.filter(username__exact = username,password__exact
                                     = password)
            if user:
                response = HttpResponseRedirect('/bootstrap/index')
                response.set_cookie('username',username,3600)
                return response
            else:
                return HttpResponseRedirect('/bootstrap/login')
    else:
        uf = RegUser()
    return render_to_response(
        'bootstrap/login.html',
        {'uf':uf},
        context_instance=RequestContext(req)
    )

def index(req):
    username = req.COOKIES.get('username','')
    return render_to_response(
        'bootstrap/index.html',
        {'username':username}
    )


def logout(req):
    #response = HttpResponse('logout!!')
    # response.delete_cookie('usename')
    #uf = RegUser()
    #return render_to_response(
    #    'bootstrap/login.html',
    #    {'uf':uf},
    #    context_instance=RequestContext(req),
    #    'bootstrap/index.html',¬
    #     {'username':username}¬

    # )
   response = HttpResponseRedirect('/bootstrap/index')
   response.delete_cookie('username')
   return response
